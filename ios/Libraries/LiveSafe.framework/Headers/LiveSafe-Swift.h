// Generated by Apple Swift version 4.2 (swiftlang-1000.11.37.1 clang-1000.11.45.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import CoreGraphics;
@import CoreLocation;
@import Foundation;
@import LiveSafeUtils;
@import ObjectiveC;
@import UIKit;
@import UserNotifications;
#endif

#import <LiveSafe/LiveSafe.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="LiveSafe",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSBundle;
@class NSCoder;

SWIFT_CLASS("_TtC8LiveSafe31ActivityIndicatorViewController")
@interface ActivityIndicatorViewController : UIViewController
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end




@interface ActivityIndicatorViewController (SWIFT_EXTENSION(LiveSafe))
- (void)loadView;
- (void)viewDidLoad;
@end

@protocol NavigationAction;

@interface AudioPlayerViewController (SWIFT_EXTENSION(LiveSafe))
@property (nonatomic, readonly, strong) id <NavigationAction> _Nullable leftAction;
@end


SWIFT_CLASS("_TtC8LiveSafe10BackAction")
@interface BackAction : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIImage;

SWIFT_PROTOCOL("_TtP8LiveSafe16NavigationAction_")
@protocol NavigationAction
@property (nonatomic, readonly, copy) NSString * _Nullable title;
@property (nonatomic, readonly, copy) void (^ _Nonnull onTap)(UIViewController * _Nonnull);
@property (nonatomic, readonly, strong) UIImage * _Nullable image;
@end


@interface BackAction (SWIFT_EXTENSION(LiveSafe)) <NavigationAction>
@property (nonatomic, readonly, copy) NSString * _Nullable title;
@property (nonatomic, readonly, strong) UIImage * _Nullable image;
@property (nonatomic, readonly, copy) void (^ _Nonnull onTap)(UIViewController * _Nonnull);
@end

enum OrderType : NSInteger;
enum SortType : NSInteger;

/// A class representing filters that will be applied to the
SWIFT_CLASS("_TtC8LiveSafe14BaseAPIFilters")
@interface BaseAPIFilters : NSObject
/// Number of items to skip (after the sort).
@property (nonatomic) NSInteger offset;
/// Maximum number of items to return
@property (nonatomic) NSInteger limit;
/// Objects after this date will be returned.
@property (nonatomic, copy) NSDate * _Nullable fromDate;
/// Objects before this date will be returned.
@property (nonatomic, copy) NSDate * _Nullable toDate;
/// Order or sorting.
@property (nonatomic) enum OrderType sortOrder;
/// Field to sort by.
@property (nonatomic) enum SortType sortBy;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithOffset:(NSInteger)offset limit:(NSInteger)limit fromDate:(NSDate * _Nullable)fromDate toDate:(NSDate * _Nullable)toDate sortOrder:(enum OrderType)sortOrder sortBy:(enum SortType)sortBy OBJC_DESIGNATED_INITIALIZER;
@end


@interface BaseAPIFilters (SWIFT_EXTENSION(LiveSafe))
/// Get the URL encoded representation of the filter string
///
/// returns:
/// The filter string to be appended to the webservice URL. Eg. ?fromDate=1462312132&toDate=1462314005
- (NSString * _Nonnull)getFilterString SWIFT_WARN_UNUSED_RESULT;
@end

@class LSBroadcastMessage;

SWIFT_CLASS("_TtC8LiveSafe30BroadcastDetailsViewController")
@interface BroadcastDetailsViewController : LSCommonViewController
- (nonnull instancetype)initWithBroadcast:(LSBroadcastMessage * _Nonnull)broadcast OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end




@interface BroadcastDetailsViewController (SWIFT_EXTENSION(LiveSafe))
- (void)viewDidLoad;
@end



@class UIScrollView;

@interface BroadcastDetailsViewController (SWIFT_EXTENSION(LiveSafe)) <UIScrollViewDelegate>
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
@end





@protocol NavigationBarStyle;

@interface BroadcastDetailsViewController (SWIFT_EXTENSION(LiveSafe))
@property (nonatomic, readonly, strong) id <NavigationBarStyle> _Nonnull navigationBarStyle;
@end









@class ChatViewModel;

SWIFT_CLASS("_TtC8LiveSafe8ChatCell")
@interface ChatCell : UITableViewCell
/// ChatViewModel to be displayed
@property (nonatomic, strong) ChatViewModel * _Null_unspecified viewModel;
/// Method to update cell UI
- (void)configureWithViewModel:(ChatViewModel * _Nonnull)viewModel;
- (void)updateWithViewModel:(ChatViewModel * _Nonnull)viewModel;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=3.0);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ChatStatus, closed) {
  ChatStatusSent = 0,
  ChatStatusFailed = 1,
  ChatStatusInProgress = 2,
  ChatStatusReceived = 3,
};

@class LSChat;
@class LSError;
@class LiveSafeURLRequest;

@interface ChatViewController (SWIFT_EXTENSION(LiveSafe))
- (LiveSafeURLRequest * _Nonnull)makeGetChatHistoryCallWithLastChat:(LSChat * _Nullable)lastChat success:(void (^ _Nonnull)(NSArray<LSChat *> * _Nonnull))success fail:(void (^ _Nonnull)(LSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
@end


@interface ChatViewController (SWIFT_EXTENSION(LiveSafe))
/// Check if the user has push notification permissions enabled and
/// if not, show the user an alert notifying them they won’t receive
/// alerts for chat messages.
- (void)checkPushNotificationPermissions;
@end

@class UIView;
@class LiveSafeAPIManager;

@interface ChatViewController (SWIFT_EXTENSION(LiveSafe))
- (nonnull instancetype)initWithContainerView:(UIView * _Nonnull)containerView apiManager:(LiveSafeAPIManager * _Nullable)apiManager;
@end


@interface ChatViewController (SWIFT_EXTENSION(LiveSafe))
- (NSInteger)indexOfChat:(LSChat * _Nonnull)chat SWIFT_WARN_UNUSED_RESULT;
- (BOOL)shouldShowTipDetails SWIFT_WARN_UNUSED_RESULT;
@end


@interface ChatViewController (SWIFT_EXTENSION(LiveSafe))
- (void)getMedia;
@end

@class UITextView;

@interface ChatViewController (SWIFT_EXTENSION(LiveSafe)) <UITextViewDelegate>
- (void)textViewDidEndEditing:(UITextView * _Nonnull)textView;
- (void)textViewDidBeginEditing:(UITextView * _Nonnull)textView;
- (void)textViewDidChange:(UITextView * _Nonnull)textView;
@end


@interface ChatViewController (SWIFT_EXTENSION(LiveSafe))
@property (nonatomic, readonly) CGFloat sendButtonBottomSpacingKeyboardClosed;
@property (nonatomic, readonly) CGFloat sendButtonBottomSpacingKeyboardOpen;
@property (nonatomic, readonly) CGFloat chatEntryBottomSpacingKeyboardClosed;
@property (nonatomic, readonly) CGFloat chatEntryBottomSpacingKeyboardOpen;
@end

@class UIColor;

SWIFT_CLASS("_TtC8LiveSafe13ChatViewModel")
@interface ChatViewModel : NSObject
/// Chat message for display
@property (nonatomic, readonly, strong) LSChat * _Nonnull message;
/// Reuse identifier for the appropriate tableview cell type
@property (nonatomic, readonly, copy) NSString * _Nonnull reuseIdentifier;
@property (nonatomic, readonly, strong) UIColor * _Nonnull chatBubbleColor;
/// Init with Chat from Objective-C
+ (ChatViewModel * _Nonnull)initWithChat:(LSChat * _Nonnull)chat SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC8LiveSafe27ChooseCountryViewController")
@interface ChooseCountryViewController : LiveSafeViewController
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end



@class UITableView;

@interface ChooseCountryViewController (SWIFT_EXTENSION(LiveSafe)) <UITableViewDelegate>
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end




@interface ChooseCountryViewController (SWIFT_EXTENSION(LiveSafe)) <UITableViewDataSource>
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


@interface CommonEvidenceListViewController (SWIFT_EXTENSION(LiveSafe))
@property (nonatomic, readonly, strong) id <NavigationAction> _Nullable leftAction;
@end


/// Wrapper class around Swift Country struct
SWIFT_CLASS("_TtC8LiveSafe12Country_objc")
@interface Country_objc : NSObject
@property (nonatomic, copy) NSString * _Nonnull name;
@property (nonatomic, copy) NSString * _Nonnull isoCode;
@property (nonatomic, copy) NSString * _Nonnull phoneCode;
@property (nonatomic, copy) NSString * _Nonnull emergencyNumber;
- (nullable instancetype)initWithIsoCode:(NSString * _Nonnull)isoCode;
+ (Country_objc * _Nonnull)defaultCountry SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC8LiveSafe16CustomBackAction")
@interface CustomBackAction : NSObject
- (nonnull instancetype)init:(void (^ _Nonnull)(void))customOnTap OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface CustomBackAction (SWIFT_EXTENSION(LiveSafe)) <NavigationAction>
@property (nonatomic, readonly, copy) NSString * _Nullable title;
@property (nonatomic, readonly, strong) UIImage * _Nullable image;
@property (nonatomic, readonly, copy) void (^ _Nonnull onTap)(UIViewController * _Nonnull);
@end


SWIFT_PROTOCOL("_TtP8LiveSafe15EmergencyAction_")
@protocol EmergencyAction
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
@end


/// Defines the information that is needed to make an emergency call.
SWIFT_PROTOCOL("_TtP8LiveSafe13EmergencyCall_")
@protocol EmergencyCall <EmergencyAction>
/// If provided this text is used in the event that is submitted
/// to the LiveSafe Dashboard for the emergency call.
@property (nonatomic, readonly, copy) NSString * _Nonnull emergencyText;
/// The phone number to call.
@property (nonatomic, readonly, copy) NSString * _Nonnull phoneNumber;
/// The type ID to use when sending the event to the LiveSafe
/// Dashboard.  Valid values are the following:
/// <ul>
///   <li>
///     TipTypeConstants.kTipTypeIdCallOrganizationSecurity
///   </li>
///   <li>
///     TipTypeConstants.kTipTypeIdCall911
///   </li>
/// </ul>
@property (nonatomic) NSInteger tipTypeId;
/// A boolean value indicating if an event should be sent
/// to the LiveSafe Dashboard when making the emergency call.
@property (nonatomic, readonly) BOOL sendEvent;
/// A boolean value indicating if location tracking will start
/// when placing the emergency call.
@property (nonatomic, readonly) BOOL enableLocationTracking;
/// The location to send to the LiveSafe Dashboard for the
/// emergency call event.  This should be the user’s current
/// location.
@property (nonatomic, readonly, strong) CLLocation * _Nullable location;
@end


/// Defines the information that is needed to send an emergency message.
SWIFT_PROTOCOL("_TtP8LiveSafe16EmergencyMessage_")
@protocol EmergencyMessage <EmergencyAction>
/// If this value is provided it is used as a default message
/// in the UI.
@property (nonatomic, readonly, copy) NSString * _Nullable emergencyText;
/// If this value is provided it is used as the hint text
/// in the UI.  If this value is not provided
/// then a default value is used as the hint text.
@property (nonatomic, readonly, copy) NSString * _Nullable hintText;
@end


SWIFT_CLASS("_TtC8LiveSafe22EmergencyNumberManager")
@interface EmergencyNumberManager : NSObject
- (nonnull instancetype)init;
@property (nonatomic, readonly, copy) NSString * _Nonnull defaultEmergencyNumber;
@property (nonatomic, readonly, copy) NSString * _Nonnull currentEmergencyNumber;
@property (nonatomic, readonly) BOOL isOutsideTheUS;
@end




@interface EventChatViewController (SWIFT_EXTENSION(LiveSafe))
@property (nonatomic, readonly, strong) id <NavigationAction> _Nullable leftAction;
@end


@interface EventChatViewController (SWIFT_EXTENSION(LiveSafe))
- (BOOL)isLocationTrackingForCurrentEvent SWIFT_WARN_UNUSED_RESULT;
- (void)stopLocationTrackingForCurrentEvent;
- (void)stopLocationMonitor;
- (void)configureLocationTrackingView;
@end


/// This class represents a google place retrieved using the google places API.
SWIFT_CLASS("_TtC8LiveSafe11GooglePlace")
@interface GooglePlace : NSObject
/// Name of place
@property (nonatomic, copy) NSString * _Nonnull placeName;
/// Description of place
@property (nonatomic, copy) NSString * _Nonnull placeAddress;
/// Coordinate where place is located
@property (nonatomic) CLLocationCoordinate2D placeCoordinate;
/// URL where map pin image exists
@property (nonatomic, readonly, copy) NSURL * _Nonnull placeMapIcon;
@property (nonatomic, readonly) NSInteger hashValue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface GooglePlace (SWIFT_EXTENSION(LiveSafe))
@property (nonatomic, readonly, copy) NSString * _Nullable searchableAddress;
@end


/// This protocol defines the interface for an observer of the location tracking service.
SWIFT_PROTOCOL("_TtP8LiveSafe18LSLocationObserver_")
@protocol LSLocationObserver
/// Called by the location tracking service periodically to pass the current user’s location.
- (void)locationUpdated:(CLLocation * _Nonnull)location;
@end


SWIFT_PROTOCOL("_TtP8LiveSafe24LSActiveLocationObserver_")
@protocol LSActiveLocationObserver <LSLocationObserver>
@end

@class UINavigationController;
@class LSCheckIn;
@protocol ButtonConfiguration;

SWIFT_CLASS("_TtC8LiveSafe18LSBroadcastManager")
@interface LSBroadcastManager : NSObject
+ (UINavigationController * _Nullable)showBroadcast:(LSBroadcastMessage * _Nonnull)message animated:(BOOL)animated error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)showBroadcast:(LSBroadcastMessage * _Nonnull)message on:(UINavigationController * _Nonnull)navigationController animated:(BOOL)animated error:(NSError * _Nullable * _Nullable)error;
+ (UINavigationController * _Nullable)showCheckIn:(LSCheckIn * _Nonnull)message helpButtonConfiguration:(id <ButtonConfiguration> _Nullable)helpButtonConfiguration animated:(BOOL)animated error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)showCheckIn:(LSCheckIn * _Nonnull)message on:(UINavigationController * _Nonnull)navigationController helpButtonConfiguration:(id <ButtonConfiguration> _Nullable)helpButtonConfiguration animated:(BOOL)animated error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_PROTOCOL("_TtP8LiveSafe7LSEvent_")
@protocol LSEvent
@property (nonatomic) NSInteger notificationId;
/// The ID for the type of the LSEvent.
@property (nonatomic, readonly) NSInteger eventTypeId;
@end


SWIFT_CLASS("_TtC8LiveSafe18LSBroadcastMessage")
@interface LSBroadcastMessage : NSObject <LSEvent>
/// The name of the organization which sent the broadcast
@property (nonatomic, copy) NSString * _Null_unspecified organizationName;
/// The message content
@property (nonatomic, copy) NSString * _Nullable subject;
/// The message content
@property (nonatomic, copy) NSString * _Nonnull text;
/// The date the message was sent
@property (nonatomic, copy) NSDate * _Null_unspecified dateCreated;
/// Notification ID of the broadcast message.  This value exists if the broadcast message
/// is created from a push notification.
@property (nonatomic) NSInteger notificationId;
@property (nonatomic, readonly) NSInteger eventTypeId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (nonnull instancetype)initWithEventId:(NSInteger)eventId orgId:(NSInteger)orgId text:(NSString * _Nonnull)text dateCreated:(NSDate * _Nonnull)dateCreated;
@end


@interface LSBroadcastMessage (SWIFT_EXTENSION(LiveSafe))
+ (LSBroadcastMessage * _Nonnull)getSampleBroadcast SWIFT_WARN_UNUSED_RESULT;
@end




@interface LSBroadcastMessage (SWIFT_EXTENSION(LiveSafe))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC8LiveSafe12LSBundleUtil") SWIFT_DEPRECATED_MSG("Use Bundle.sdkBundle instead")
@interface LSBundleUtil : BaseBundleUtil
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED;
@end

@class NSNumber;

SWIFT_CLASS("_TtC8LiveSafe6LSChat")
@interface LSChat : NSObject <LSEvent>
/// The message being sent
@property (nonatomic, copy) NSString * _Nonnull text;
/// Date this chat message was created (server time)
@property (nonatomic, copy) NSDate * _Nullable dateCreated;
/// ID of the user who created this chat message
@property (nonatomic) NSInteger userId;
/// Name of the user (for display) who created this chat message
@property (nonatomic, copy) NSString * _Nonnull displayName;
/// Notification ID of the chat.  This value exists if the chat is created from
/// a push notification.
@property (nonatomic) NSInteger notificationId;
/// Status of the chat message
@property (nonatomic) enum ChatStatus status;
@property (nonatomic, strong) NSNumber * _Nullable objcTipId;
@property (nonatomic, strong) NSNumber * _Nullable objcMessageId;
@property (nonatomic, readonly) NSInteger eventTypeId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (nonnull instancetype)initWithText:(NSString * _Nonnull)text userName:(NSString * _Nonnull)userName userId:(NSInteger)userId OBJC_DESIGNATED_INITIALIZER;
@end




@interface LSChat (SWIFT_EXTENSION(LiveSafe))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class LSTip;

/// This class provides the public interface to start chat for a tip.
SWIFT_CLASS("_TtC8LiveSafe13LSChatManager")
@interface LSChatManager : NSObject
/// Displays the chat screen for the given tip.
/// This form of the API returns the SDK’s root navigation controller.  The
/// client code will host this root view controller on their UI.  For example
/// it will be added as a tab bar item in UITabBarController or UITabBar.
/// Subsequent navigation is handled by the livesafe sdk navigation controller.
/// Returning to the host app UI is performed by removing <em>all</em>
/// view controllers from the navigation stack
/// (i.e. from UINavigationController.viewControllers).
+ (UINavigationController * _Nullable)startChatForTip:(LSTip * _Nonnull)tip error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Displays the chat screen for the given tip.
/// This form of the API accepts a navigation controller. The SDK will use this
/// navigation controller to push the LiveSafe SDK
/// root view controller of the tip submit workflow.
/// Returning to the host app UI is performed by removing <em>all</em> LiveSafe SDK
/// related view controllers from the navigation stack
/// (i.e. from UINavigationController.viewControllers).
+ (BOOL)startChatForTipWithNavigationController:(UINavigationController * _Null_unspecified)sourceNavigationController tip:(LSTip * _Nonnull)tip error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8LiveSafe20LSChatManagerPrivate")
@interface LSChatManagerPrivate : NSObject
/// Displays the chat screen for the given tip and allows a LSAPIManager to be
/// passed in.
/// \param for The tip to chat on.
///
/// \param with The APIManager to make chat API calls.
///
///
/// returns:
/// A UINavigationController containing the chat.
+ (UINavigationController * _Nullable)startChatFor:(LSTip * _Nonnull)tip with:(LiveSafeAPIManager * _Nullable)apiManager error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Displays the chat screen for the given tip and allows a LSAPIManager to be
/// passed in.
/// \param for The tip to chat on.
///
/// \param on The navigation controller to hold the chat.
///
/// \param with The APIManager to make chat API calls.
///
///
/// returns:
/// A UINavigationController containing the chat.
+ (BOOL)startChatFor:(LSTip * _Nonnull)tip on:(UINavigationController * _Nonnull)navigationController with:(LiveSafeAPIManager * _Nullable)apiManager hideSendChat:(BOOL)isChatSendDisabled error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8LiveSafe9LSCheckIn")
@interface LSCheckIn : NSObject <LSEvent>
/// The unique ID of the broadcast message
@property (nonatomic) NSInteger broadcastId;
/// The unique ID of corresponding event
@property (nonatomic) NSInteger eventId;
/// The id of the organization which sent the checkin.
@property (nonatomic) NSInteger orgId;
/// The name of the organization which sent the checkin.
@property (nonatomic, copy) NSString * _Nonnull organizationName;
/// The message content
@property (nonatomic, copy) NSString * _Nonnull text;
/// The date the message was sent
@property (nonatomic, copy) NSDate * _Nonnull dateCreated;
/// Notification ID of the broadcast message.  This value exists if the broadcast message
/// is created from a push notification.
@property (nonatomic) NSInteger notificationId;
@property (nonatomic, readonly) NSInteger eventTypeId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end




@interface LSCheckIn (SWIFT_EXTENSION(LiveSafe))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


@interface LSCommonViewController (SWIFT_EXTENSION(LiveSafe))
- (void)viewDidLoad;
@end



@class NSNotification;

@interface LSCommonViewController (SWIFT_EXTENSION(LiveSafe))
/// This method is called when the keyboard is displayed.  It is also called
/// when the keyboard height changes.  For example when the predictive text
/// view is added or removed.
- (void)keyboardWasShown:(NSNotification * _Nonnull)notification;
- (void)keyboardWillHide:(NSNotification * _Nonnull)notification;
@end


/// Public interface for Emergency Options functionality.
/// This class provides the public interface for the emergency options
/// functionality that is available in the LiveSafe SDK.
SWIFT_CLASS("_TtC8LiveSafe25LSEmergencyOptionsManager")
@interface LSEmergencyOptionsManager : NSObject
/// Makes an emergency call.
/// This API will make an emergency call if the device has phone capabilities.  Once the
/// call is placed an event is submitted to the LiveSafe Dashboard and location tracking
/// for that event starts.  It should be noted that sending the event and starting location
/// tracking are driven off the EmergencyCall.sendEvent and EmergencyCall.enableLocationTracking
/// flags.
/// \param callItem Provides the information about the emergency call, such as the phone
/// number to use and whether to send an event and start location tracking.
///
/// \param completion A completion block parameterized with the tip submitted for the
/// call (if any) and an error to indicate any error condition that might occur during the
/// emergency call execution.
///
+ (void)makeCallWithCallItem:(id <EmergencyCall> _Nonnull)callItem completion:(void (^ _Nullable)(LSTip * _Nullable, LSError * _Nullable))completion;
/// Sends an emergency message.
/// This API starts the tip submit process to send an emergency message
/// to the LiveSafe Dashboard. Once the message is sent location tracking
/// for the submitted emergency message will start.
/// \param messageItem Provides the information about the emergency message, such as the
/// default text to display in the UI.
///
/// \param sourceNavigationController The navigation constroller used to push the
/// tip submit view controller.
///
/// \param completion A completion block parameterized with the tip submitted for the
/// message (if any) and an error to indicate any error condition that might occur during the
/// tip submit execution.
///
+ (void)sendMessageWithMessageItem:(id <EmergencyMessage> _Nonnull)messageItem sourceNavigationController:(UINavigationController * _Nonnull)sourceNavigationController completion:(void (^ _Nullable)(LSTip * _Nullable, LSError * _Nullable))completion;
/// Sends an emergency message.
/// See other form of the API for description.  The only difference is that a navigation
/// controller is returned with the tip submit UI in it.
+ (UINavigationController * _Nonnull)sendMessageWithMessageItem:(id <EmergencyMessage> _Nonnull)messageItem completion:(void (^ _Nullable)(LSTip * _Nullable, LSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// Returns the local emergency phone number.
/// This API determines the local emergency phone number based on the location parameter.
/// If no location is passed then the number is determined based on other factors such
/// as the user’s home cellural network.  Passing the location significantly increases
/// the accuracy of the emergency phone number that is returned.
/// \param location The location for which to determine the emergency phone number.
/// This will usually be the user’s current location.
///
/// \param completion A completion block parameterized with the calculated local
/// emergency phone number.
///
+ (void)getLocalEmergencyPhoneWithLocation:(CLLocation * _Nullable)location completion:(void (^ _Nonnull)(NSString * _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



enum LSErrorType : NSInteger;
@class NSError;

/// This class represents an error that might occur in the livesafe SDK.
/// The error property contains the NSError (if any) that was created
/// when the LSError was initialized.
SWIFT_CLASS("_TtC8LiveSafe7LSError")
@interface LSError : NSObject
@property (nonatomic) enum LSErrorType errorType;
@property (nonatomic, strong) NSError * _Nullable error;
@property (nonatomic, copy) NSString * _Nullable message;
@property (nonatomic, copy) NSString * _Nullable displayMessage;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
- (nonnull instancetype)initWithType:(enum LSErrorType)type displayErrorMessage:(NSString * _Nullable)displayErrorMessage OBJC_DESIGNATED_INITIALIZER;
@end


@interface LSError (SWIFT_EXTENSION(LiveSafe))
- (BOOL)isFatal SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, LSErrorType, closed) {
  LSErrorTypeInternalError = 1000,
  LSErrorTypeInvalidJSON = 1001,
  LSErrorTypeWebserviceFailure = 1002,
  LSErrorTypeParsingFailed = 1003,
  LSErrorTypeSdkNotInitialized = 1004,
  LSErrorTypeNonFatal = 1005,
  LSErrorTypeInvalidParameter = 1006,
  LSErrorTypeFunctionNotAvailable = 1007,
  LSErrorTypeLocationServicesNotAuthorized = 1008,
};



SWIFT_CLASS("_TtC8LiveSafe10LSGeofence")
@interface LSGeofence : NSObject
@property (nonatomic) NSInteger geofenceId;
@property (nonatomic) NSInteger geofenceType;
@property (nonatomic) NSInteger organizationId;
@property (nonatomic, copy) NSString * _Nonnull geofenceName;
@property (nonatomic, copy) NSString * _Nonnull text;
@property (nonatomic, copy) NSString * _Nonnull address;
@property (nonatomic) CLLocationCoordinate2D center;
@property (nonatomic) double radius;
@property (nonatomic, strong) UIColor * _Nonnull color;
@property (nonatomic, copy) NSArray<CLLocation *> * _Nonnull coordinates;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Notification center notification names that are raised throughout the life cycle
/// of location tracking.
SWIFT_CLASS("_TtC8LiveSafe22LSLocationNotification")
@interface LSLocationNotification : NSObject
/// Raised when location tracking starts.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull trackingStarted;)
+ (NSString * _Nonnull)trackingStarted SWIFT_WARN_UNUSED_RESULT;
/// Raised when location tracking stops.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull trackingEnded;)
+ (NSString * _Nonnull)trackingEnded SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull tipId;)
+ (NSString * _Nonnull)tipId SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull observer;)
+ (NSString * _Nonnull)observer SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC8LiveSafe18LSLocationServices")
@interface LSLocationServices : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) LSLocationServices * _Nonnull shared;)
+ (LSLocationServices * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
+ (void)setShared:(LSLocationServices * _Nonnull)value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface LSLocationServices (SWIFT_EXTENSION(LiveSafe))
- (BOOL)startTrackingForTip:(NSInteger)identifier SWIFT_WARN_UNUSED_RESULT;
- (BOOL)stopTrackingForTip:(NSInteger)identifier SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isTrackingForTip:(NSInteger)identifier SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isTracking SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEmergencyTracking SWIFT_WARN_UNUSED_RESULT;
- (void)stopActiveTracking;
- (BOOL)startPassiveTracking SWIFT_WARN_UNUSED_RESULT;
- (void)stopPassiveTracking;
- (BOOL)addWithObserver:(id <LSLocationObserver> _Nonnull)observer SWIFT_WARN_UNUSED_RESULT;
- (BOOL)removeWithObserver:(id <LSLocationObserver> _Nonnull)observer SWIFT_WARN_UNUSED_RESULT;
- (BOOL)removeWithObserver:(id <LSLocationObserver> _Nonnull)observer raiseNotification:(BOOL)raiseNotification SWIFT_WARN_UNUSED_RESULT;
- (void)stopAllTracking;
- (void)requestLocation:(void (^ _Nonnull)(CLLocation * _Nullable, LSError * _Nullable))completion;
@property (nonatomic, readonly, strong) CLLocation * _Nullable lastLocation;
@end

@class LSOrganization;
@class UIApplication;
@class UILocalNotification;
@class UNUserNotificationCenter;
@class UNNotification;
@class UNNotificationResponse;

/// This class is the main interface to the LiveSafe SDK.
/// It contains APIs to perform SDK initialization, session creation
/// and notification handling.
SWIFT_CLASS("_TtC8LiveSafe9LSManager")
@interface LSManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// Returns the current sdk version.
/// This method can be called without initializing the SDK.
+ (NSString * _Nonnull)sdkVersion SWIFT_WARN_UNUSED_RESULT;
/// This API initializes the LiveSafe SDK.
/// This init method should be called from the UIApplicationDelegate class
/// in the application:didFinishLaunchingWithOptions: method.
/// NOTE: This method must be called before any other SDK API is called, otherwise
/// the SDK API call will fail.
+ (void)initializeWithAccessKey:(NSString * _Nonnull)accessKey secretKey:(NSString * _Nonnull)secretKey navigationBarStyle:(id <NavigationBarStyle> _Nullable)navigationBarStyle;
/// Form of initializer that allows client to set whether or not warnings should
/// be shown if push notification or location permissions are disabled.
/// \param accessKey SDK access key.
///
/// \param secretKey SDK secret key.
///
/// \param navigationBarStyle Style object describing how UINavigationBar should be configured.
///
/// \param showPermissionWarnings Whether or not warnings will be shown if location
/// and push notification permissions aren’t enabled.
///
+ (void)initializeWithAccessKey:(NSString * _Nonnull)accessKey secretKey:(NSString * _Nonnull)secretKey navigationBarStyle:(id <NavigationBarStyle> _Nullable)navigationBarStyle showPermissionWarnings:(BOOL)showPermissionWarnings;
/// See createSession(deviceToken: Data? = nil, organizationId: Int? = nil, completion:((_ error: LSError?) -> Void)?)
/// The only difference is the type of organizationId (NSNumber?) so it is visible in objc.
+ (void)createSessionWithToken:(NSData * _Nullable)token organizationId:(NSNumber * _Nullable)organizationId completion:(void (^ _Nullable)(LSError * _Nullable))completion;
/// This API ends the current LiveSafe SDK user session.
/// To protect user’s privacy this method should be called when a user logs out of their account in the
/// client application.
/// This method will log out the current SDK user, and unregister their device
/// token for LiveSafe push notifications.
+ (void)endSession;
+ (void)deinitializeSDK;
/// Updates the organization of the user and downloads the new organization
/// customization data.
+ (void)setOrganization:(NSInteger)newOrganizationId completion:(void (^ _Nonnull)(LSError * _Nullable))completion;
/// Returns the current organization of the user.
+ (LSOrganization * _Nullable)getOrganization SWIFT_WARN_UNUSED_RESULT;
/// Returns the organization details for the given organization ID.
/// Note that this call will only be successful if the user has access privilege
/// to the given organization.
+ (void)getOrganizationDetails:(NSInteger)organizationId completion:(void (^ _Nonnull)(LSOrganization * _Nullable, LSError * _Nullable))completion;
/// Updates the device token.
/// This method will send the device token to the back-end.  It should be
/// called every time the device token is received in
/// <UIApplicationDelegate>.application:didRegisterForRemoteNotificationsWithDeviceToken
+ (void)updateDeviceToken:(NSData * _Nullable)deviceToken;
/// Method to configure whether or not warnings will be shown if the user
/// has location and/or push notification permissions disabled.
+ (void)shouldShowPermissionWarnings:(BOOL)newValue;
/// Determines if the remote notification is intended for the LiveSafe SDK.
/// Returns true if the remote notification is intended for the SDK and false
/// otherwise.
+ (BOOL)isLiveSafeRemoteNotification:(NSDictionary * _Nonnull)userInfo SWIFT_WARN_UNUSED_RESULT;
/// Handles a remote notification that is intended for the LiveSafe SDK.
/// This method should be called from
/// <UIApplicationDelegate>.didReceiveRemoteNotification: if the remote
/// notification is handled by the livesafe sdk then true is returned
/// and false otherwise.
+ (BOOL)handleRemoteNotification:(NSDictionary * _Nonnull)userInfo initialLivesafeViewController:(UIViewController * _Nullable)initialLivesafeViewController actionCompletion:(void (^ _Nullable)(void))actionCompletion SWIFT_WARN_UNUSED_RESULT;
/// This is similar to the other form of handleRemoteNotification method.  The difference
/// is that it returns a navigation controller with the appropriate UI to handle
/// the notification.
+ (void)handleRemoteNotification:(NSDictionary * _Nonnull)userInfo actionCompletion:(void (^ _Nullable)(void))actionCompletion completion:(void (^ _Nonnull)(UINavigationController * _Nullable))completion;
/// Handles a local notification action that is intended for the SDK.
/// This method should be called from
/// <UIApplicationDelegate>.application:(UIApplication *)application
/// handleActionWithIdentifier:(NSString *)identifier
/// forLocalNotification:(UILocalNotification *)notification
/// completionHandler:(void (^)())completionHandler.
+ (BOOL)handleLocalNotificationAction:(UIApplication * _Nonnull)application actionIdentifier:(NSString * _Nonnull)actionIdentifier notification:(UILocalNotification * _Nonnull)notification completionHandler:(void (^ _Nonnull)(void))completionHandler SWIFT_WARN_UNUSED_RESULT;
/// Handles a local notification that is intended for the SDK.
/// This method should be called from
/// <UIApplicationDelegate>.application:(UIApplication *)app
/// didReceiveLocalNotification:(UILocalNotification *)notification.
+ (BOOL)handleLocalNotification:(UIApplication * _Nonnull)application notification:(UILocalNotification * _Nonnull)notification SWIFT_WARN_UNUSED_RESULT;
/// Handles a notification presentation if the application uses the
/// UNUserNotificationCenter API.
/// This method should be called from the application’s UNUserNotificationCenterDelegate
/// to handle a notification presentation.  If the notification is not intended for the
/// LiveSafe SDK then this method returns false.  In such a case the application should
/// handle the notification presentation.
+ (BOOL)handleNotificationPresentation:(UNUserNotificationCenter * _Nonnull)center notification:(UNNotification * _Nonnull)notification initialLivesafeViewController:(UIViewController * _Nullable)initialLivesafeViewController completion:(void (^ _Nonnull)(UNNotificationPresentationOptions))completion SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=10.0);
/// Handles a notification action if the application uses the
/// UNUserNotificationCenter API.
/// This method should be called from the application’s UNUserNotificationCenterDelegate
/// to handle a notification action.  If the notification is not intended for the
/// LiveSafe SDK then this method returns false.  In such a case the application should
/// handle the notification action.
+ (BOOL)handleNotificationAction:(UNUserNotificationCenter * _Nonnull)center response:(UNNotificationResponse * _Nonnull)response initialLivesafeViewController:(UIViewController * _Nullable)initialLivesafeViewController completion:(void (^ _Nonnull)(void))completion SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=10.0);
/// Registers the notification settings required by the LiveSafe SDK.
/// This method should be called when the application requests notification
/// permissions from the user.  It is used to register the notification
/// settings used by the LiveSafe SDK.
+ (void)registerNotificationSettings;
/// Handles unsubmitted tips.
/// This method should be called from
/// <UIApplication>.applicationDidBecomeActive:(UIApplication *)application.
+ (BOOL)handleFailedTips SWIFT_WARN_UNUSED_RESULT;
@end


@interface LSManager (SWIFT_EXTENSION(LiveSafe))
/// This method is available to update the location associated with the current user session.
/// \param location The current location of the user session.
///
/// \param completion The completion to be called if the location update is successful. An error will be returned only if the update fails.
///
+ (void)updateUserLocation:(CLLocation * _Nonnull)location completion:(void (^ _Nonnull)(LSError * _Nullable))completion;
@end

@class LSUser;

@interface LSManager (SWIFT_EXTENSION(LiveSafe))
+ (void)createSDKSession:(LSUser * _Nonnull)user organization:(LSOrganization * _Nonnull)organization;
@end


@interface LSManager (SWIFT_EXTENSION(LiveSafe))
/// This method allows for customization of the SDK appearance. This can be
/// called at any time, and will effect all viewControllers presented
/// subsequently. The method is helpful for vendors who have multiple
/// organizations, and want the SDK to appear styled differently for each
/// organization.
/// \param navigationBarStyle An object conforming to the
/// NavigationBarStyle protocol detailing the desired appearance of the
/// UINavigationBar for SDK view controllers.
///
+ (void)setNavigationBarStyle:(id <NavigationBarStyle> _Nonnull)navigationBarStyle;
@end

@protocol LSNotificationObserver;

@interface LSManager (SWIFT_EXTENSION(LiveSafe))
+ (void)addRemoteNotificationObserver:(id <LSNotificationObserver> _Nonnull)observer;
+ (void)removeRemoteNotificationObserver:(id <LSNotificationObserver> _Nonnull)observer;
+ (void)clearRemoteNotificationObservers;
@end




@interface LSManager (SWIFT_EXTENSION(LiveSafe))
/// Determines if the user verified their account.
/// Account verification is when the user verified their phone.
///
/// returns:
/// true or false indicating user authorization status
+ (BOOL)isAuthorized SWIFT_WARN_UNUSED_RESULT;
/// Present the user authorization workflow to allow the user to verify their
/// account.
+ (void)authorizeIfNeeded:(UINavigationController * _Nonnull)sourceNavigationController completion:(void (^ _Nullable)(LSError * _Nullable))completion;
/// This is the same as the other form of this method but returns a navigation controller
/// with the UI in it.
+ (UINavigationController * _Nonnull)authorizeIfNeededWithCompletion:(void (^ _Nonnull)(LSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_CLASS("_TtC8LiveSafe16LSManagerPrivate")
@interface LSManagerPrivate : NSObject
/// Handles a remote notification that is intended for the LiveSafe SDK.
/// This method should be called from
/// <UIApplicationDelegate>.didReceiveRemoteNotification: if the remote
/// notification is handled by the livesafe sdk then true is returned
/// and false otherwise.
+ (BOOL)handleRemoteNotification:(NSDictionary * _Nonnull)userInfo initialLivesafeViewController:(UIViewController * _Nullable)initialLivesafeViewController helpButtonConfiguration:(id <ButtonConfiguration> _Nullable)helpButtonConfiguration animated:(BOOL)animated forceViewPush:(BOOL)forceViewPush apiManager:(LiveSafeAPIManager * _Nullable)apiManager completionHandler:(void (^ _Nullable)(void))completionHandler SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)handleNotificationPresentation:(UNUserNotificationCenter * _Nonnull)center notification:(UNNotification * _Nonnull)notification helpButtonConfiguration:(id <ButtonConfiguration> _Nullable)helpButtonConfiguration initialLivesafeViewController:(UIViewController * _Nullable)initialLivesafeViewController completion:(void (^ _Nonnull)(UNNotificationPresentationOptions))completion SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=10.0);
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSString;

/// This class represents a media item.
/// Media items are associated with a tip and returned in LSTip.mediaItems.
SWIFT_CLASS("_TtC8LiveSafe11LSMediaItem")
@interface LSMediaItem : NSObject
/// The filename of the media item.
@property (nonatomic, copy) NSString * _Nullable name;
/// The timestamp the media item was created.
@property (nonatomic, copy) NSDate * _Nullable dateCreated;
/// :nodoc:
@property (nonatomic) NSInteger step;
/// :nodoc:
@property (nonatomic) NSInteger status;
/// The URL of the file for the media item.
@property (nonatomic, copy) NSURL * _Nullable fileUrl;
/// Returns a string representation of the type of
/// media item.
@property (nonatomic, strong) NSString * _Nullable objcType;
/// Returns the media ID as an NSNumber to use in objc code.
@property (nonatomic, strong) NSNumber * _Nullable objcMediaId;
/// Returns the tip ID as an NSNumber to use in objc code.
@property (nonatomic, strong) NSNumber * _Nullable objcTipId;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface LSMediaItem (SWIFT_EXTENSION(LiveSafe))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (NSString * _Nonnull)fileSuffix SWIFT_WARN_UNUSED_RESULT;
@end


/// This class is used to return a navigation controller with the initial
/// livesafe SDK view controller set.  It does not contain any special
/// functionality, it simply extends UINavigationController.
SWIFT_CLASS("_TtC8LiveSafe22LSNavigationController")
@interface LSNavigationController : UINavigationController
- (nonnull instancetype)initWithNavigationBarClass:(Class _Nullable)navigationBarClass toolbarClass:(Class _Nullable)toolbarClass OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=5.0);
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// A protocol to mix into navigation controllers so navigation bars will be styled.
SWIFT_PROTOCOL("_TtP8LiveSafe9Styleable_")
@protocol Styleable
@end


@interface LSNavigationController (SWIFT_EXTENSION(LiveSafe)) <Styleable>
@end


SWIFT_PROTOCOL("_TtP8LiveSafe22LSNotificationObserver_")
@protocol LSNotificationObserver
- (void)notificationReceived:(id <LSEvent> _Nonnull)notification isRead:(BOOL)isRead;
@end


SWIFT_PROTOCOL("_TtP8LiveSafe25LSPassiveLocationObserver_")
@protocol LSPassiveLocationObserver <LSLocationObserver>
@end


/// This observer type will receive both active and passive updates, but will
/// not directly start active location updates.
SWIFT_PROTOCOL("_TtP8LiveSafe31LSOpportunisticLocationObserver_")
@protocol LSOpportunisticLocationObserver <LSPassiveLocationObserver>
@end

@class OrganizationConfiguration;
@class ProfileQuestion;
@class LSTipType;

/// Represents an organization.
SWIFT_CLASS("_TtC8LiveSafe14LSOrganization")
@interface LSOrganization : NSObject
/// Organization unique identifier.
@property (nonatomic) NSInteger orgId;
/// Organization display name.
@property (nonatomic, copy) NSString * _Nonnull name;
/// Cartel display name.
@property (nonatomic, copy) NSString * _Nullable cartelName;
/// Object containing organization’s app configuration settings.
@property (nonatomic, strong) OrganizationConfiguration * _Nonnull appConfiguration;
@property (nonatomic, copy) NSArray<ProfileQuestion *> * _Nonnull profileQuestions;
@property (nonatomic, copy) NSArray<LSTipType *> * _Nonnull tipTypes;
/// Organization unique identifier.
@property (nonatomic, strong) NSNumber * _Nonnull objcOrgId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface LSOrganization (SWIFT_EXTENSION(LiveSafe))
- (LSTipType * _Nullable)tipTypeWithId:(NSInteger)tipTypeId SWIFT_WARN_UNUSED_RESULT;
@end


@interface LSOrganization (SWIFT_EXTENSION(LiveSafe))
+ (NSURL * _Nullable)getImageURLforOrganization:(NSInteger)orgId SWIFT_WARN_UNUSED_RESULT;
@end


@interface LSOrganization (SWIFT_EXTENSION(LiveSafe))
@property (nonatomic, readonly, copy) NSString * _Nonnull storageId;
@property (nonatomic, readonly, copy) NSString * _Nullable jsonString;
@end



/// This class represents a place.
SWIFT_CLASS("_TtC8LiveSafe7LSPlace")
@interface LSPlace : NSObject
/// Id of place
@property (nonatomic) NSInteger placeId;
/// Name of place
@property (nonatomic, copy) NSString * _Nonnull name;
/// Address of place
@property (nonatomic, copy) NSString * _Nonnull address;
/// Description of place
@property (nonatomic, copy) NSString * _Nonnull placeDetails;
/// Name of organization
@property (nonatomic, copy) NSString * _Nonnull organizationName;
/// Location of place
@property (nonatomic) CLLocationCoordinate2D coordinate;
/// URL where map pin icon can be found.
@property (nonatomic, readonly, copy) NSURL * _Nonnull mapImageUrl;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface LSPlace (SWIFT_EXTENSION(LiveSafe))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


@interface LSPlace (SWIFT_EXTENSION(LiveSafe))
@property (nonatomic, readonly, copy) NSString * _Nullable searchableAddress;
@end


SWIFT_PROTOCOL("_TtP8LiveSafe27LSRemoteNotificationHandler_")
@protocol LSRemoteNotificationHandler
- (BOOL)canHandleNotification:(id _Nonnull)notification SWIFT_WARN_UNUSED_RESULT;
- (void)handleNotification:(id _Nonnull)notification;
@end


SWIFT_CLASS("_TtC8LiveSafe24LSRemoteNotificationItem")
@interface LSRemoteNotificationItem : NSObject
+ (BOOL)isLiveSafeNotification:(NSDictionary * _Nonnull)userInfo SWIFT_WARN_UNUSED_RESULT;
+ (id _Nullable)createNotificationItem:(NSDictionary * _Nonnull)userinfo SWIFT_WARN_UNUSED_RESULT;
+ (LSChat * _Nullable)createChat:(NSDictionary * _Nonnull)notificationInfo SWIFT_WARN_UNUSED_RESULT;
+ (LSTip * _Nullable)createTip:(NSDictionary * _Nonnull)notificationInfo SWIFT_WARN_UNUSED_RESULT;
+ (LSBroadcastMessage * _Nullable)createBroadcastMessage:(NSDictionary * _Nonnull)notificationInfo SWIFT_WARN_UNUSED_RESULT;
+ (LSCheckIn * _Nullable)createCheckIn:(NSDictionary * _Nonnull)notificationInfo SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8LiveSafe8LSReport")
@interface LSReport : NSObject
@property (nonatomic) NSInteger reportId;
@property (nonatomic) NSInteger eventTypeId;
@property (nonatomic) NSInteger organizationId;
@property (nonatomic, copy) NSString * _Nonnull organizationName;
@property (nonatomic, copy) NSString * _Nonnull text;
@property (nonatomic, copy) NSURL * _Nonnull mapImageUrl;
@property (nonatomic, copy) NSDate * _Nonnull dateCreated;
@property (nonatomic, strong) CLLocation * _Nonnull location;
@property (nonatomic, copy) NSString * _Nonnull streetAddress;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// This class is used to pass the tip details when submitting a tip.
SWIFT_CLASS("_TtC8LiveSafe17LSReportTipConfig")
@interface LSReportTipConfig : NSObject
/// The initial text to display in the tip details UI.
@property (nonatomic, copy) NSString * _Nullable tipText;
/// The type of tip to submit.
@property (nonatomic, strong) LSTipType * _Nonnull tipTypeToSubmit;
/// :nodoc:
@property (nonatomic) BOOL enableLocationTracking;
/// Creates and initializes an object of this class with a
/// tip type.
/// \param tipType the tip type to use for this object
///
- (nonnull instancetype)initWithTipType:(LSTipType * _Nonnull)tipType OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

/// LiveSafe core features available for deep-linking.
typedef SWIFT_ENUM(NSInteger, LSSidekickFeature, closed) {
/// Peer-to-peer feature letting users share location and watch out for each other.
  LSSidekickFeatureSafewalk = 0,
/// Organization-specific content relating to safety and security.
  LSSidekickFeatureResources = 1,
/// LiveSafe user profile management.
  LSSidekickFeatureProfile = 2,
/// Inbox where all user’s received messages can be found.
  LSSidekickFeatureInbox = 3,
};


/// Manager containing APIs to create deep-links to, or directly launch LiveSafe
/// SideKick features.
SWIFT_CLASS("_TtC8LiveSafe17LSSidekickManager")
@interface LSSidekickManager : NSObject
/// Navigate to the LiveSafe core application, and start a specified SideKick feature for the
/// current user. If the current user is unauthorized, the authorization flow will be invoked.
/// \param for The SideKick feature to launch.
///
/// \param using A navigation controller to use presenting the authorization flow if
/// required. If nil, the SDK will attempt to infer the UINavigationController to use.
///
/// \param completion A block that will be executed immediately before the SideKick feature
/// is started. If starting the feature fails, the error parameter will be non-nil.
///
///
/// throws:
/// <code>SideKickError.invalidNavigationController</code> if authorization is required but a
/// navigation controller can’t be found, <code>SideKickError.invalidSession</code> if the current user
/// session has not been verified, or <code>SideKickError.invalidOrganization</code> if a valid
/// organization can’t be inferred.
+ (BOOL)startSidekickFor:(enum LSSidekickFeature)feature using:(UINavigationController * _Nullable)navigatonController error:(NSError * _Nullable * _Nullable)error completion:(void (^ _Nullable)(LSError * _Nullable))completion;
/// Navigate to the LiveSafe core application, and start a specified SideKick feature for the
/// current user. If the current user is unauthorized, the authorization flow will be invoked.
/// \param for The SideKick feature to launch.
///
/// \param organizationId The id of the organization for which to configure the feature.
///
/// \param using A navigation controller to use presenting the authorization flow if
/// required. If nil, the SDK will attempt to infer the UINavigationController to use.
///
/// \param completion A block that will be executed immediately before the SideKick feature
/// is started. If starting the feature fails, the error parameter will be non-nil.
///
///
/// throws:
/// <code>SideKickError.invalidNavigationController</code> if authorization is required but a
/// navigation controller can’t be found, or <code>SideKickError.invalidSession</code> if the current
/// user session has not been verified.
+ (BOOL)startSidekickFor:(enum LSSidekickFeature)feature organizationId:(NSInteger)organizationId using:(UINavigationController * _Nullable)navigationController error:(NSError * _Nullable * _Nullable)error completion:(void (^ _Nullable)(LSError * _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class represents a tip that is submitted to an organization.
SWIFT_CLASS("_TtC8LiveSafe5LSTip")
@interface LSTip : NSObject
/// Description of the event.  This is the information the user enters
/// in the UI for the event.
@property (nonatomic, copy) NSString * _Nullable text;
/// Bool describing if the tip was submitted anonymously
@property (nonatomic) BOOL isAnonymous;
/// Date tip was first stored on server
@property (nonatomic, copy) NSDate * _Nullable dateCreated;
/// Location where event was reported
@property (nonatomic, strong) CLLocation * _Nullable location;
/// String address where the event was reported.
@property (nonatomic, copy) NSString * _Nullable addressString;
/// The media items associated with this tip (if any).
@property (nonatomic, copy) NSArray<LSMediaItem *> * _Nonnull mediaItems;
/// Object representing the tip type of the tip.
@property (nonatomic, strong) LSTipType * _Nullable tipType;
/// Return the tipId as an NSNumber to use in objc code.
@property (nonatomic, strong) NSNumber * _Nullable objcTipId;
/// Returns the orgId of the tip as an NSNumber to use in objc code.
@property (nonatomic, strong) NSNumber * _Nullable objcOrgId;
/// A unique string identifier (UUID) for the tip.
@property (nonatomic, copy) NSString * _Nonnull uuid;
/// :nodoc:
/// String used to identify and retrieve this object when placed in a persistent store.
@property (nonatomic, readonly, copy) NSString * _Nonnull storageId;
/// :nodoc:
/// Used during tip submit.
@property (nonatomic) NSInteger step;
/// :nodoc:
/// Used during tip submit.
@property (nonatomic) NSInteger status;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
/// Creates and initializes an LSTip using a tip id.
/// \param newTipId the ID to use for tipId
///
- (nonnull instancetype)initWithNewTipId:(NSInteger)newTipId;
/// Creates and initializes an LSTip by copying an existing tip.
/// \param tip the tip to copy
///
- (nonnull instancetype)initWithTip:(LSTip * _Nonnull)tip;
@end




@interface LSTip (SWIFT_EXTENSION(LiveSafe))
+ (LSTip * _Nullable)retrieveStoredTip:(NSString * _Nonnull)uuid error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


@interface LSTip (SWIFT_EXTENSION(LiveSafe))
- (void)addMediaItem:(LSMediaItem * _Nonnull)mediaItem;
- (void)removeMediaItem:(LSMediaItem * _Nonnull)mediaItem;
@end


@interface LSTip (SWIFT_EXTENSION(LiveSafe))
+ (LSTip * _Nullable)retrieveLSTipWithIdentifier:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly, copy) NSString * _Nullable objcJsonString;
@end


/// This class contains APIs related to tip submission.
SWIFT_CLASS("_TtC8LiveSafe18LSTipSubmitManager")
@interface LSTipSubmitManager : NSObject
/// Starts the tip submit process.
/// This form of the API returns the SDK’s root navigation controller.  The
/// client code will host this root view controller on their UI.  For example
/// it will be added as a tab bar item in UITabBarController or UITabBar.
/// Subsequent navigation is handled by the livesafe sdk navigation controller.
/// Returning to the host app UI is performed by removing <em>all</em>
/// view controllers from the navigation stack
/// (i.e. from UINavigationController.viewControllers).
+ (UINavigationController * _Nonnull)startReportTip:(LSReportTipConfig * _Nonnull)reportTipConfig completion:(void (^ _Nullable)(LSTip * _Nullable, LSError * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
/// Starts the tip submit process.
/// This form of the API accepts a navigation controller. The SDK will use this
/// navigation controller to push the LiveSafe SDK
/// root view controller of the tip submit workflow.
/// Returning to the host app UI is performed by removing <em>all</em> LiveSafe SDK
/// related view controllers from the navigation stack
/// (i.e. from UINavigationController.viewControllers).
+ (void)startReportTipWithNavigationController:(UINavigationController * _Null_unspecified)sourceNavigationController reportTipConfig:(LSReportTipConfig * _Nonnull)reportTipConfig completion:(void (^ _Nullable)(LSTip * _Nullable, LSError * _Nullable))completion;
/// Create a UINavigationController containing a single view controller which
/// displays the current user’s previously submitted tips.
///
/// returns:
/// A LSNavigationController presenting the user’s activity
+ (UINavigationController * _Nonnull)showUserActivity SWIFT_WARN_UNUSED_RESULT;
/// Presents a view controller displaying the current user’s previously
/// submitted tips.
/// \param using The UINavigationController to use presenting the
/// current user’s activity.
///
+ (void)showUserActivityUsing:(UINavigationController * _Null_unspecified)sourceNavigationController;
/// Retrieves an array containing all of the available
/// LiveSafe Tip Types for your
/// organization.
/// \param completion A completion block parameterized with the array of
/// Tip Types available to the user’s organization.
///
+ (void)getTipTypes:(void (^ _Nonnull)(NSArray<LSTipType *> * _Nullable, LSError * _Nullable))completion;
/// Retrieves an array containing all of the organization geofences for the
/// current organization.
/// \param completion A completion block parameterized with the array of
/// organization geofences for the user’s current organization.
///
+ (void)getOrganizationGeofences:(void (^ _Nonnull)(NSArray<LSGeofence *> * _Nullable, LSError * _Nullable))completion;
/// Retrieves an array containing all of the nearby Google Safety places.
/// \param nearLocation The location around which to find places
///
/// \param searchRadius The radius (in meters) to search
///
/// \param withAPIKey The Google places API key to use when searching
///
/// \param completion A completion block parameterized with the array of
/// safety places near the given location.
///
+ (void)getSafetyPlacesWithNearLocation:(CLLocationCoordinate2D)location withAPIKey:(NSString * _Nonnull)key completion:(void (^ _Nonnull)(NSArray<GooglePlace *> * _Nullable, LSError * _Nullable))completion;
/// Retrieves an array of the current user’s previously submitted tips.
/// \param completion A completion block parameterized with the array of
/// previously submitted tips.
///
+ (void)getSubmittedTips:(void (^ _Nonnull)(NSArray<LSTip *> * _Nullable, LSError * _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface LSTipSubmitManager (SWIFT_EXTENSION(LiveSafe))
/// Start submitting a tip in the background (no UI is involved).
/// <ul>
///   <li>
///     Returns true if tip submit was successfully startedin the background
///   </li>
/// </ul>
/// \param tip the tip to submit
///
+ (BOOL)startReportTipInBackground:(LSTip * _Nonnull)tip notifyOnFailure:(BOOL)notifyOnFailure SWIFT_WARN_UNUSED_RESULT;
@end


/// This class represents a type for a tip.
SWIFT_CLASS("_TtC8LiveSafe9LSTipType")
@interface LSTipType : NSObject
/// Default tip type is Other
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=default) LSTipType * _Nonnull default_;)
+ (LSTipType * _Nonnull)default SWIFT_WARN_UNUSED_RESULT;
/// Unique identifier for the tip type.
@property (nonatomic) NSInteger tipTypeId;
/// The display name for the type.
@property (nonatomic, copy) NSString * _Nonnull displayName;
/// String name of the image representing this tip type.
@property (nonatomic, copy) NSString * _Nonnull imageName;
/// String for
@property (nonatomic, copy) NSString * _Nonnull mapImageName;
/// String shown to the user while chatting with security officials.
@property (nonatomic, copy) NSString * _Nonnull chatText;
/// String shown to the user as a prompt when entering tip details.
@property (nonatomic, copy) NSString * _Nonnull hintText;
/// Boolean describing if this tip type can be submitted anonymously.
@property (nonatomic) BOOL isAnonymousDisabled;
/// Boolean describing if this tip type should be shown in list of available
/// tip types.
@property (nonatomic) BOOL isVisible;
/// Initializer that creates a tip type given a tip type id.
/// \param tipTypeId a valid tip type ID
///
- (nonnull instancetype)initWithTypeId:(NSInteger)typeId OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface LSTipType (SWIFT_EXTENSION(LiveSafe))
/// String representation of the tip type
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


SWIFT_CLASS("_TtC8LiveSafe6LSUser")
@interface LSUser : NSObject
/// Unique identifier for the current user
@property (nonatomic) NSInteger userId;
/// First name of the user
@property (nonatomic, copy) NSString * _Nullable firstName;
/// Last name of the user
@property (nonatomic, copy) NSString * _Nullable lastName;
/// Full name of the user
@property (nonatomic, readonly, copy) NSString * _Nullable fullName;
- (nonnull instancetype)initWithUserId:(NSInteger)userId authorizationToken:(NSString * _Nonnull)authorizationToken firstName:(NSString * _Nullable)firstName lastName:(NSString * _Nullable)lastName OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC8LiveSafe13LSUserSession")
@interface LSUserSession : NSObject
/// Get the current user object
///
/// returns:
/// The uniqueId of the current user (if user exists)
+ (NSNumber * _Nullable)objcCurrentUserId SWIFT_WARN_UNUSED_RESULT;
/// Get the current user’s name
///
/// returns:
/// The name of the current user (if set).
+ (NSString * _Nullable)currentUserName SWIFT_WARN_UNUSED_RESULT;
/// Get the current user’s organization
///
/// returns:
/// The current organization
+ (LSOrganization * _Nullable)currentOrganization SWIFT_WARN_UNUSED_RESULT;
/// Update the Organization for the current session
+ (void)updateSessionOrganization:(LSOrganization * _Nonnull)newOrganization;
/// Attempt to resume session with user from KeyChain
///
/// returns:
/// True if session was successfully resumed
+ (BOOL)canResumeSession SWIFT_WARN_UNUSED_RESULT;
+ (void)updateUserSession:(NSString * _Nonnull)firstName lastName:(NSString * _Nullable)lastName;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC8LiveSafe12LeftChatCell")
@interface LeftChatCell : ChatCell
- (void)configureWithViewModel:(ChatViewModel * _Nonnull)viewModel;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=3.0);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8LiveSafe18LiveSafeAPIManager")
@interface LiveSafeAPIManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end






@interface LiveSafeAPIManager (SWIFT_EXTENSION(LiveSafe))
- (LiveSafeURLRequest * _Nonnull)getSafetyPlacesWithNearLocation:(CLLocationCoordinate2D)location googlePlacesKey:(NSString * _Nonnull)googlePlacesKey success:(void (^ _Nonnull)(NSArray<GooglePlace *> * _Nonnull))success fail:(void (^ _Nonnull)(LSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
@end


@interface LiveSafeAPIManager (SWIFT_EXTENSION(LiveSafe))
- (LiveSafeURLRequest * _Nonnull)getTipTypesWithSuccess:(void (^ _Nonnull)(NSArray<LSTipType *> * _Nonnull))success fail:(void (^ _Nonnull)(LSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
@end










@interface LiveSafeAPIManager (SWIFT_EXTENSION(LiveSafe))
- (LiveSafeURLRequest * _Nonnull)getChatHistoryForTip:(LSTip * _Nonnull)tip filters:(BaseAPIFilters * _Nullable)filters success:(void (^ _Nonnull)(NSArray<LSChat *> * _Nonnull))success fail:(void (^ _Nonnull)(LSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
- (LiveSafeURLRequest * _Nonnull)sendChat:(LSChat * _Nonnull)chatToSend success:(void (^ _Nonnull)(LSChat * _Nonnull))success fail:(void (^ _Nonnull)(LSError * _Nonnull, LSChat * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
@end


@interface LiveSafeAPIManager (SWIFT_EXTENSION(LiveSafe))
- (LiveSafeURLRequest * _Nonnull)getCheckIn:(NSInteger)eventId success:(void (^ _Nonnull)(LSCheckIn * _Nonnull))success fail:(void (^ _Nonnull)(LSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
@end




@interface LiveSafeAPIManager (SWIFT_EXTENSION(LiveSafe))
- (LiveSafeURLRequest * _Nonnull)submitTip:(LSTip * _Nonnull)tip toOrganization:(LSOrganization * _Nonnull)toOrganization success:(void (^ _Nonnull)(LSTip * _Nonnull))success fail:(void (^ _Nonnull)(LSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
- (LiveSafeURLRequest * _Nonnull)getTip:(NSInteger)tipId success:(void (^ _Nonnull)(LSTip * _Nonnull))success fail:(void (^ _Nonnull)(LSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
- (void)addTipMedia:(NSInteger)tipId mediaItem:(LSMediaItem * _Nonnull)mediaItem success:(void (^ _Nonnull)(LSMediaItem * _Nonnull))success fail:(void (^ _Nonnull)(LSError * _Nonnull))fail;
- (LiveSafeURLRequest * _Nullable)getTipMediaWithTipId:(NSInteger)tipId success:(void (^ _Nonnull)(NSArray<LSMediaItem *> * _Nullable))success fail:(void (^ _Nonnull)(LSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
- (LiveSafeURLRequest * _Nullable)getMediaItemWithTipId:(NSInteger)tipId mediaItem:(LSMediaItem * _Nonnull)mediaItem success:(void (^ _Nonnull)(LSMediaItem * _Nonnull))success fail:(void (^ _Nonnull)(LSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
- (LiveSafeURLRequest * _Nonnull)getSubmittedTips:(void (^ _Nonnull)(NSArray<LSTip *> * _Nonnull))success fail:(void (^ _Nonnull)(LSError * _Nonnull))fail SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_CLASS("_TtC8LiveSafe21LiveSafeDebugLocation")
@interface LiveSafeDebugLocation : CLLocation
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLatitude:(CLLocationDegrees)latitude longitude:(CLLocationDegrees)longitude SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithCoordinate:(CLLocationCoordinate2D)coordinate altitude:(CLLocationDistance)altitude horizontalAccuracy:(CLLocationAccuracy)hAccuracy verticalAccuracy:(CLLocationAccuracy)vAccuracy timestamp:(NSDate * _Nonnull)timestamp SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithCoordinate:(CLLocationCoordinate2D)coordinate altitude:(CLLocationDistance)altitude horizontalAccuracy:(CLLocationAccuracy)hAccuracy verticalAccuracy:(CLLocationAccuracy)vAccuracy course:(CLLocationDirection)course speed:(CLLocationSpeed)speed timestamp:(NSDate * _Nonnull)timestamp SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC8LiveSafe26LiveSafeNavigationBarStyle")
@interface LiveSafeNavigationBarStyle : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8LiveSafe30LiveSafeLogoNavigationBarStyle")
@interface LiveSafeLogoNavigationBarStyle : LiveSafeNavigationBarStyle
@property (nonatomic, readonly, strong) UIView * _Nullable titleView;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class UIFont;

SWIFT_PROTOCOL("_TtP8LiveSafe18NavigationBarStyle_")
@protocol NavigationBarStyle
@property (nonatomic, readonly, strong) UIColor * _Nonnull barColor;
@property (nonatomic, readonly, strong) UIColor * _Nonnull tintColor;
@property (nonatomic, readonly) BOOL isTranslucent;
@property (nonatomic, readonly, strong) UIFont * _Nullable barButtonFont;
@property (nonatomic, readonly, strong) UIFont * _Nullable titleFont;
@property (nonatomic, readonly, strong) UIView * _Nullable titleView;
@end


@interface LiveSafeNavigationBarStyle (SWIFT_EXTENSION(LiveSafe)) <NavigationBarStyle>
@property (nonatomic, readonly, strong) UIColor * _Nonnull barColor;
@property (nonatomic, readonly, strong) UIColor * _Nonnull tintColor;
@property (nonatomic, readonly) BOOL isTranslucent;
@property (nonatomic, readonly, strong) UIFont * _Nullable barButtonFont;
@property (nonatomic, readonly, strong) UIFont * _Nullable titleFont;
@property (nonatomic, readonly, strong) UIView * _Nullable titleView;
@end


SWIFT_CLASS("_TtC8LiveSafe15LiveSafeSession")
@interface LiveSafeSession : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) id <NavigationBarStyle> _Nullable navigationBarStyle;)
+ (id <NavigationBarStyle> _Nullable)navigationBarStyle SWIFT_WARN_UNUSED_RESULT;
+ (void)setNavigationBarStyle:(id <NavigationBarStyle> _Nullable)value;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A wrapper built to abstract the reqest objects returned to the client from the
/// webservice framework.
SWIFT_CLASS("_TtC8LiveSafe18LiveSafeURLRequest")
@interface LiveSafeURLRequest : NSObject
/// Cancel the webservice request.
- (void)cancel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end




@interface LiveSafeViewController (SWIFT_EXTENSION(LiveSafe))
@property (nonatomic, readonly, strong) id <NavigationBarStyle> _Nonnull navigationBarStyle;
@end


@interface LiveSafeViewController (SWIFT_EXTENSION(LiveSafe))
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
@end


SWIFT_CLASS("_TtC8LiveSafe25LocationPermissionChecker")
@interface LocationPermissionChecker : NSObject
+ (BOOL)isAlwaysEnabled SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isWhileInUseEnabled SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isUndetermined SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)passiveTrackingEnabled SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)activeTrackingEnabled SWIFT_WARN_UNUSED_RESULT;
+ (void)showLocationRequiredAlertIfNeededFor:(CLAuthorizationStatus)permissionLevel on:(UIViewController * _Nonnull)viewController dismissPressed:(void (^ _Nullable)(void))dismissPressed;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC8LiveSafe27LocationPermissionRequester")
@interface LocationPermissionRequester : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) LocationPermissionRequester * _Nonnull shared;)
+ (LocationPermissionRequester * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
+ (void)setShared:(LocationPermissionRequester * _Nonnull)value;
- (void)authorizeAlwaysWithClientCompletion:(void (^ _Nullable)(BOOL))clientCompletion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, LocationTrackingType, closed) {
  LocationTrackingTypeActive = 0,
  LocationTrackingTypePassive = 1,
};


SWIFT_CLASS("_TtC8LiveSafe7LogUtil")
@interface LogUtil : NSObject
+ (void)log:(id _Nonnull)stringConvertible;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8LiveSafe27MediaItemDownloadController")
@interface MediaItemDownloadController : NSObject
- (void)downloadMediaItem:(LSMediaItem * _Nonnull)mediaItem completion:(void (^ _Nullable)(LSMediaItem * _Nonnull))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Defines the way sorted results will ordered
/// Use in Objective-C:
/// <ul>
///   <li>
///     OrderTypeAscending
///   </li>
///   <li>
///     OrderTypeDescending
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, OrderType, closed) {
/// Order objects in ascending order.
  OrderTypeAscending = 0,
/// Order the results in descending order.
  OrderTypeDescending = 1,
};


/// Object containing org-specific customization information
/// used by SDK and core LiveSafeApp
SWIFT_CLASS("_TtC8LiveSafe25OrganizationConfiguration")
@interface OrganizationConfiguration : NSObject
/// Message shown in the tip submit confirmation popup.
@property (nonatomic, copy) NSString * _Nonnull tipSubmitConfirmationString;
/// Bool that controls the ability to submit a tip anonymously
@property (nonatomic) BOOL disableAnonymous;
/// Bool that indicates if calling is enabled in safewalk.
@property (nonatomic) BOOL callEnabledInSafewalk;
/// String to use during tip submit process.
@property (nonatomic, copy) NSString * _Nonnull chatText;
@property (nonatomic, copy) NSString * _Nonnull emergencyText;
@property (nonatomic, copy) NSString * _Nonnull hintText;
@property (nonatomic, copy) NSString * _Nonnull tipSelectTitle;
/// Optional configurations to show alert before
/// “Call Organization Security” is invoked.
@property (nonatomic, copy) NSString * _Nullable beforeCallSecurityAlertTitle;
@property (nonatomic, copy) NSString * _Nullable beforeCallSecurityAlertMessage;
@property (nonatomic, readonly) BOOL hasBeforeCallSecurityAlert;
@property (nonatomic, copy) NSString * _Nonnull mapPlatform;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end



@class ProfileQuestionAnswer;

/// Class modeling a profile question asked by an organization.
SWIFT_CLASS("_TtC8LiveSafe15ProfileQuestion")
@interface ProfileQuestion : NSObject
@property (nonatomic, copy) NSString * _Nonnull question;
@property (nonatomic) NSInteger questionId;
@property (nonatomic) BOOL isRequired;
@property (nonatomic, copy) NSArray<ProfileQuestionAnswer *> * _Nonnull answers;
@property (nonatomic, copy) NSString * _Nullable regexPattern;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Class modeling the answer to a profile question.
SWIFT_CLASS("_TtC8LiveSafe21ProfileQuestionAnswer")
@interface ProfileQuestionAnswer : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull answer;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, RetryStrategy, closed) {
  RetryStrategySingleAttempt = 1,
  RetryStrategyThreeMinuteRetry = 2,
};


SWIFT_CLASS("_TtC8LiveSafe13RightChatCell")
@interface RightChatCell : ChatCell
- (void)configureWithViewModel:(ChatViewModel * _Nonnull)viewModel;
- (void)updateWithViewModel:(ChatViewModel * _Nonnull)viewModel;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=3.0);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end




@interface SelectEvidenceViewController (SWIFT_EXTENSION(LiveSafe))
- (void)configureAccessibilityIdentifiers;
@end




@interface SelectEvidenceViewController (SWIFT_EXTENSION(LiveSafe))
@property (nonatomic, readonly, strong) id <NavigationAction> _Nullable leftAction;
@end


@interface SelectEvidenceViewController (SWIFT_EXTENSION(LiveSafe))
- (void)showExitAlert:(LSTip * _Nonnull)tip;
- (void)resetUIColors;
- (CGFloat)bodyViewTopConstraintAdjustment SWIFT_WARN_UNUSED_RESULT;
- (void)configureAnonymousSwitchForTipType:(LSTipType * _Nonnull)tipType;
- (void)initLocationServices SWIFT_METHOD_FAMILY(none);
@end

/// Defines the mechanism used to sort the results
/// Use in Objective-C:
/// <ul>
///   <li>
///     SortTypeCreatedDate
///   </li>
///   <li>
///     SortTypeModifiedDate
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, SortType, closed) {
  SortTypeCreatedDate = 0,
  SortTypeModifiedDate = 1,
};



SWIFT_CLASS("_TtC8LiveSafe14SystemChatCell")
@interface SystemChatCell : ChatCell
- (void)configureWithViewModel:(ChatViewModel * _Nonnull)viewModel;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=3.0);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8LiveSafe14TestAPIManager")
@interface TestAPIManager : LiveSafeAPIManager
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)setCallToFail;
@end


SWIFT_CLASS("_TtC8LiveSafe14TipChatContext")
@interface TipChatContext : NSObject
/// The Tip about which chats are occurring.
@property (nonatomic, readonly, strong) LSTip * _Nonnull tip;
/// The organization to which the tip was reported.
@property (nonatomic, readonly, strong) LSOrganization * _Nonnull organization;
/// Whether the complete tip should be retrieved.
@property (nonatomic, readonly) BOOL shouldLoadTip;
@property (nonatomic, readonly) BOOL enableLocationTracking;
@property (nonatomic, readonly) BOOL isChatSendDisabled;
/// The APIManager that will post chats, and retrieve chat history.
@property (nonatomic, readonly, strong) LiveSafeAPIManager * _Nonnull apiManager;
/// Initailize a new TipSubmitContext object.
/// \param tip The Tip about which chats are occurring.
///
/// \param organization The organization to which the tip was reported.
///
/// \param shouldLoadTip Whether the complete tip should be retrieved.
///
/// \param locationTracker An object to return the user’s current location.
///
/// \param apiManager The APIManager that will post chats, and retrieve chat history.
///
- (nonnull instancetype)initWithTip:(LSTip * _Nonnull)tip organization:(LSOrganization * _Nonnull)organization shouldLoadTip:(BOOL)shouldLoadTip enableLocationTracking:(BOOL)enableLocationTracking apiManager:(LiveSafeAPIManager * _Nonnull)apiManager isChatSendDisabled:(BOOL)isChatSendDisabled OBJC_DESIGNATED_INITIALIZER;
/// Create a new TipChatContext with an updated tip.
/// <ul>
///   <li>
///     _: The tip for the newly created context.
///   </li>
/// </ul>
///
/// returns:
/// A context object with the new tip.
- (TipChatContext * _Nonnull)updateTip:(LSTip * _Nonnull)newTip SWIFT_WARN_UNUSED_RESULT;
/// Create a new TipChatContext without a TipSubmitController.
///
/// returns:
/// A context object with the tipSubmitController set to nil.
- (TipChatContext * _Nonnull)removeTipSubmitController SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC8LiveSafe21TipChatFlowController")
@interface TipChatFlowController : NSObject
+ (void)showChat:(UINavigationController * _Null_unspecified)sourceNavigationController tipChatContext:(TipChatContext * _Nonnull)tipChatContext;
+ (void)finishChatOn:(UINavigationController * _Nullable)navigationController;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@class TipViewModel;
@protocol TipDetailsChatViewCellDelegate;

SWIFT_CLASS("_TtC8LiveSafe18TipDetailsChatCell")
@interface TipDetailsChatCell : UITableViewCell
@property (nonatomic, strong) TipViewModel * _Null_unspecified viewModel;
@property (nonatomic, strong) id <TipDetailsChatViewCellDelegate> _Nullable delegate;
- (void)awakeFromNib;
- (void)configureWithViewModel:(TipViewModel * _Nonnull)viewModel;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=3.0);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end








SWIFT_CLASS("_TtC8LiveSafe16TipSubmitContext")
@interface TipSubmitContext : NSObject
@property (nonatomic, strong) LSOrganization * _Null_unspecified organization;
@property (nonatomic, strong) LSTipType * _Null_unspecified tipType;
@property (nonatomic, copy) NSString * _Nullable tipText;
@property (nonatomic, copy) void (^ _Nullable clientCompletion)(LSTip * _Nullable, LSError * _Nullable);
@property (nonatomic) BOOL enableLocationTracking;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface TipSubmitController (SWIFT_EXTENSION(LiveSafe))
- (void)raiseTipSubmitFailedNotificationWithTip:(LSTip * _Nonnull)tip;
- (void)raiseMediaUploadFailedNotificationWithTip:(LSTip * _Nonnull)tip;
@end


SWIFT_CLASS("_TtC8LiveSafe23TipSubmitFlowController")
@interface TipSubmitFlowController : NSObject
+ (void)handleNavigationForSuccess:(UIViewController * _Nonnull)sourceViewController tipSubmitContext:(TipSubmitContext * _Nonnull)tipSubmitContext tip:(LSTip * _Nonnull)tip showAlert:(BOOL)showAlert;
+ (void)handleNavigationForFailure:(UIViewController * _Nonnull)sourceViewController tipSubmitContext:(TipSubmitContext * _Nonnull)tipSubmitContext error:(LSError * _Nullable)error;
+ (void)initTipSubmitNavigationStack:(UINavigationController * _Null_unspecified)sourceNavigationController reportTipConfig:(LSReportTipConfig * _Nonnull)reportTipConfig completion:(void (^ _Nullable)(LSTip * _Nullable, LSError * _Nullable))completion SWIFT_METHOD_FAMILY(none);
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@protocol TipSubmitDelegate;

@interface TipSubmitManager (SWIFT_EXTENSION(LiveSafe))
- (void)subscribe:(id <TipSubmitDelegate> _Nonnull)newDelegate toUpdatesFor:(LSTip * _Nonnull)tip;
- (void)updateRetryStrategyFor:(LSTip * _Nonnull)tip to:(enum RetryStrategy)newStrategy shouldNotify:(BOOL)shouldNotify;
@end


SWIFT_CLASS("_TtC8LiveSafe30TipSubmitNotificationConstants")
@interface TipSubmitNotificationConstants : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull tipSubmitNotificationCategoryId;)
+ (NSString * _Nonnull)tipSubmitNotificationCategoryId SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull mediaUploadNotificationCategoryId;)
+ (NSString * _Nonnull)mediaUploadNotificationCategoryId SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull tipSubmitActionIdRetry;)
+ (NSString * _Nonnull)tipSubmitActionIdRetry SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull tipSubmitActionIdCancel;)
+ (NSString * _Nonnull)tipSubmitActionIdCancel SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull tipSubmitFailedNotificationIdPrefix;)
+ (NSString * _Nonnull)tipSubmitFailedNotificationIdPrefix SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSTimeInterval notificationDelay;)
+ (NSTimeInterval)notificationDelay SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class contains constants with the ID of various tip types.
SWIFT_CLASS("_TtC8LiveSafe16TipTypeConstants")
@interface TipTypeConstants : NSObject
/// Other tip type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger kTipTypeIdOther;)
+ (NSInteger)kTipTypeIdOther SWIFT_WARN_UNUSED_RESULT;
/// Call 911 tip type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger kTipTypeIdCall911;)
+ (NSInteger)kTipTypeIdCall911 SWIFT_WARN_UNUSED_RESULT;
/// Call organization security tip type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger kTipTypeIdCallOrganizationSecurity;)
+ (NSInteger)kTipTypeIdCallOrganizationSecurity SWIFT_WARN_UNUSED_RESULT;
/// Message police tip type.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger kTipTypeIdMessagePolice;)
+ (NSInteger)kTipTypeIdMessagePolice SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger kTipTypeIdBroadcastMessage;)
+ (NSInteger)kTipTypeIdBroadcastMessage SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger kTipTypeIdSafeWalk;)
+ (NSInteger)kTipTypeIdSafeWalk SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger kTipTypeIdSafeRide;)
+ (NSInteger)kTipTypeIdSafeRide SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger kTipTypeIdBroadcastCheckin;)
+ (NSInteger)kTipTypeIdBroadcastCheckin SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8LiveSafe12TipViewModel")
@interface TipViewModel : NSObject
@property (nonatomic, readonly) NSInteger numberOfAttachedPhotos;
@property (nonatomic, readonly) NSInteger numberOfAttachedVideos;
@property (nonatomic, readonly) NSInteger numberOfAttachedAudio;
/// Init with Tip from Objective-C
+ (TipViewModel * _Nonnull)initWithTip:(LSTip * _Nonnull)tip SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end








@interface UIViewController (SWIFT_EXTENSION(LiveSafe))
- (BOOL)isLiveSafeViewController SWIFT_WARN_UNUSED_RESULT;
@end




@interface UIViewController (SWIFT_EXTENSION(LiveSafe))
- (void)ls_configureNavBarStyle;
- (void)ls_configureControls;
- (void)ls_leftNavigationAction;
- (void)ls_rightNavigationAction;
@end


SWIFT_CLASS("_TtC8LiveSafe26UserActivityViewController")
@interface UserActivityViewController : LiveSafeViewController
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end




@interface UserActivityViewController (SWIFT_EXTENSION(LiveSafe))
- (void)viewDidLoad;
@end


@interface UserActivityViewController (SWIFT_EXTENSION(LiveSafe)) <UITableViewDelegate>
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (UIView * _Nullable)tableView:(UITableView * _Nonnull)tableView viewForFooterInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
@end


@interface UserActivityViewController (SWIFT_EXTENSION(LiveSafe))
@property (nonatomic, readonly, strong) id <NavigationBarStyle> _Nonnull navigationBarStyle;
@end


@interface UserActivityViewController (SWIFT_EXTENSION(LiveSafe)) <UITableViewDataSource>
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end






/// This class contains the keys and key prefixes for anything that is
/// stored in NSUserDefaults by the LiveSafe SDK.  It is very important
/// to have an entry in this file for each piece of information that
/// we store in order to be able to do cleanup. The SDK should
/// only be deleting the information it created and not anything the
/// the app created.
SWIFT_CLASS("_TtC8LiveSafe23UserDefaultKeyConstants")
@interface UserDefaultKeyConstants : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kTipStorageIdPrefix;)
+ (NSString * _Nonnull)kTipStorageIdPrefix SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kDeviceTokenStorageIdKey;)
+ (NSString * _Nonnull)kDeviceTokenStorageIdKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kCurrentSessionOrganization;)
+ (NSString * _Nonnull)kCurrentSessionOrganization SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<NSString *> * _Nonnull allKeys;)
+ (NSArray<NSString *> * _Nonnull)allKeys SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC8LiveSafe15ViewIdConstants")
@interface ViewIdConstants : NSObject
+ (NSString * _Nonnull)XIB_LEFT_CHAT_CELL_VIEW SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)XIB_RIGHT_CHAT_CELL_VIEW SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)XIB_SYSTEM_CHAT_CELL_VIEW SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)XIB_TIP_DETAILS_CELL_VIEW SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)CELL_REUSE_IDENTIFIER_LEFT_CHAT SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)CELL_REUSE_IDENTIFIER_RIGHT_CHAT SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)CELL_REUSE_IDENTIFIER_SYSTEM_CHAT SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)CELL_REUSE_IDENTIFIER_TIP_DETAILS_CHAT SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
